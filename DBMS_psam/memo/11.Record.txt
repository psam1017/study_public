
레코드(Record)

1. 레코드는 실제 데이터이며 레코드 하나가 테이블 내 행 한 줄을 의미한다.
2. 레코드가 가지는 각 값은 그 테이블이 가지는 열들의 데이터 타입에 맞게 작성되어야 한다.



레코드 삽입(Create)

INSERT INTO `스키마 이름`.`테이블 이름`(`열 이름`, ...)
VALUES (값, ...), (값, ...);
INSERT INTO `study`.`foods` (`name`, `price`, `sold_out_flag`)
VALUES ('토마토 스파게티', 12000, FALSE),
	('크림 스파게티', 12000, FALSE);

-테이블이 실제로 가지는 열 순서와 무관하게 INSERT QUERY에 명시한 열 순서와 값 순서가 일치해야 한다.
-값을 명시하지 않은 열에 대해서는 NULL 값을 대입하여 INSERT를 시도한다.
-단, 명시한 열과 값의 개수는 같아야 한다.



레코드 조회(Read)★ : 11-1 메모장 참고.



레코드 수정(Update)

UPDATE `스키마 이름`.`테이블 이름`
SET `열 이름` = {새로운 값}
{WHERE 조건?}
{LIMIT x?}

UPDATE `study`.`foods`
SET	`price` = 16000,
	`sold_out_flag` = TRUE
WHERE `name` = '크림 스파게티'
LIMIT 1;

-WHERE는 거의 필수
-LIMIT x : 조건에 부합하더라도 주어진 개수 x개만 수정한다. 성능 상 효율적



레코드 삭제(Delete)

DELETE
FROM `스키마 이름`.`테이블 이름`
{WHERE 조건?}
{LIMIT x?};

DELETE
FROM `study`.`foods`
where `price` < 10000;

-WHERE 조건을 거의 필수로 사용하게 된다. 그렇지 않은 경우는 모든 레코드를 삭제해야 하는 경우인데, 현실적으로 그렇게 할 일이 많지 않다.
-LIMIT x : 조건에 부합하더라도 주어진 개수 x개만 삭제한다. LIMIT이 없다면 PK를 삭제할 때, 이미 값을 지웠어도 계속해서 쿼리를 실행한다. 따라서 성능 상 LIMIT이 유리한 경우가 많다.


