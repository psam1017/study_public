스프링 프레임워크의 장점
1. "복잡함"에 반기를 들어 만들어진 프레임워크
2. 프로젝트 전체 구조를 설계할 때 유용한 프레임워크
3. 다른 프레임워크들의 포용 -> 여러 프레임워크를 혼용하여 사용할 수 있음(node, express 등)
4. 개발 생산성과 개발도구의 지원



스프링 프레임워크의 특징
1. POJO 기반의 구성
2. 의존성 주입(DI)을 통한 객체 간의 관계 구성
3. AOP(Aspect-Oriented-Programming) 지원
4. 편리한 MVC 구조
5. WAS에 종속적이지 않은 개발환경

=====================================================

1. POJO 기반의 구성 : Plain Old Java Object(평이하고 오래된 자바 객체) 기반 -> "JAVA를 쓸 수 있다"
오래된 방식의 간단한 자바 객체라는 의미이며, JAVA 코드에서 일반적으로 객체를 구성하는 방식을 스프링 프레임워크에서 그대로 사용할 수 있다는 말이다.

2. 의존성 주입(Dependency Injection)을 통한 객체 간의 관계 구성

셰프와 레스토랑
셰프는 ... 레스토랑 없이는 살 수 ... 있다! 뭐, 다른 일 하면 되니까!
레스토랑은 ... 셰프가 없으면 운영할 수 ... 없다! 반드시 필요하다!
-> "레스토랑은 셰프한테 의존적이다."

class 레스토랑{
	셰프 chef = new 셰프();
	// 레스토랑과 의존성 결합 관계가 "단단하다."
	// 단단하면 -> "유연성이 떨어진다."
}

의존성 -> 객체가 다른 객체를 필요로 하는 것. 결합 관계가 단단하고 유연성이 떨어진다.
주입 -> 단단한 결합 관계를 느슨하게 하는 기술!

의존성(Dependency)이란 하나의 객체가 다른 객체 없이 제대로 된 역할을 할 수 없다는 것을 의미한다.
예를 들어, A 객체가 B 객체 없이 동작이 불가능한 상황을 "'A'가 'B'에 의존적이다."라고 표현한다.

주입(Injection)이란 말 그대로 외부에서 밀어넣은 것을 의미한다.
예를 들어, 어떤 객체가 필요로 하는 객체를 '외부'에서 밀어넣는 것을 의미한다.
주입을 받는 입장에서는 어떤 객체인지 신경 쓸 필요가 없고, 어떤 객체에 의존하든 자신의 역할을 변하지 않게 된다('외부'에서 알아서 유연하게 주입해주니까!).