의존성 주입은 중요하다!

...의존성 주입을 통한 객체 간의 관계 구성

**의존
ⓐ →→→→→→ ⓑ
"a 객체에서 b 객체를 직접 생성"
"단단한 결합 관계. 유연함이 떨어진다."

ⓐ →→???↔↔ ⓑ
"a 객체는 b객체가 필요하다는 신호만 보내고, b 객체를 주입하는 것은 외부에서 이루어짐"

의존성 주입방식을 사용하기 위해서는 ???라는 존재가 필요하게 된다.
스프링 프레임워크에서는 ApplicationContext가 '외부', '???'에 해당하는 컨테이너이다.
Spring에서 WebApplicationContext가 필요한 객체들을 생성하고, 필요한 객체들을 주입해주는 역할을 한다.

따라서 개발자들은 기존의 프로그래밍과 달리 객체와 객체를 분리해서 생성하고, 이러한 객체들을 엮는 "wiring" 작업의 형태로 개발하게 된다. -> auto wiring

ApplicationContext가 관리하는 객체들은 빈(bean)이라고 하며, bean과 bean 사이에서 의존관계를 처리하는 방식으로는 XML방식, 어노테이션 설정, JAVA 설정이 있으며, 본 강의에서는 XML, annotation을 사용한다.

3. AOP(Aspect-Oriented-Programming) 지원 -> 관점 지향 프로그래밍

예를 들어, '결제' 메소드를 하나 만들면 transaction, log, exception은 반드시 필요하다. 근데, '결제'의 로직을 구성하는 데에는 방해가 된다. 따라서 이러한 불편한 필수요소들은 신경 쓰지 않고 개발하는 것을 관점 지향이라고 한다.

결제 전체 로직 중에서 시점을 정해서 필요한 순간에 기능을 수행한다. ex. 결제 시작할 때 로그 기능을 수행. 결제를 마무리할 때 포인트 기능을 수행. 그 외에도 공통으로 사용하는 필요한 로직은 여러 메소드에서 사용할 수 있다.
-> 종단 관심사(메인 로직)와 횡단 관심사(메인 로직이 아닌 로직)

관점 지향 프로그래밍
좋은 개발환경은 개발자가 비즈니스 로직에만 집중할 수 있게 한다. 스프링 프레임워크는 반복적인 코드를 제거하여 핵심 비즈니스 로직에만 집중할 수 있게 한다.
보안, 로그, 트랜잭션, 예외처리와 같이 비즈니스 로직은 아니지만, 반드시 처리가 필요한 부분을 횡단 관심사(cross-concern)라고 한다.
스프링 프레임워크는 이러한 횡단 관심사를 분리해서 제작하는 것이 가능하고 횡단 관심사를 모듈로 분리하는 프로그래밍을 AOP라고 한다.
이를 통해서 3가지 이점이 발생한다.
1) 핵심 비즈니스 로직에만 집중하여 코드를 개발할 수 있다.
2) 각 프로젝트마다 다른 관심사 적용 시 코드 수정이 최소화된다.
3) 원하는 관심사의 유지보수가 수월한 코드 구성이 가능하다.

======================================================================================

4. 편리한 MVC 구조
+ 트랜잭션의 지원 -> ex. 포인트 적립이 Insert와 Update 2가지가 필요하다고 했을 때, Insert만 수행되고 Update에서 오류가 났다면 -> 개발자가 직접 Insert를 취소해야 하는데 -> Spring은 알아서 Insert를 롤백해준다.
DB 작업 시 트랜잭션 관리를 매번 상황에 맞게 코드로 작성하지 않고, 어노테이션이나 XML로 트랜잭션 관리를 설정할 수 있다.


5. WAS에 종속적이지 않은 개발 환경 -> 즉, WAS가 없어도 테스트가 가능하다!
+ 단위 테스트
전체 Application을 실행하지 않아도 기능별 단위 테스트가 용이하기 때문에 버그를 줄이고 개발 시간을 단축할 수 있다.