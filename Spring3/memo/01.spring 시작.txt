spring boot => ...
spring framework => 전자정부 표준 프레임워크

spring이 주로 쓰는 버전 = 3 또는 4
spring3 = spring framework
spring4 = spring boot

프레임워크란 무엇인가
frame + work -> (틀 + 작업) -> 틀이 정해져있는 상태에서 작업을 하자! -> 동일한 작업 환경

라이브러리 -> 도서관 -> 누가 만들어 놓은 소스코드 모음을 가져와서 사용하기
API -> 라이브러리의 모음???
라이브러리의 양이 방대해지면 -> 프레임워크. 상향평준화를 하기 위한 노력...?

자동차 하나를 만들기 위해, 경력직 3명을 채용했다!
그 3명이 각자가 가지고 있는 연장, 도구, 장비가 바로 '라이브러리'
아무 것도 없는 상태에서 만들기 시작하면 결과물은 조금씩 다르다! -> 똑같은 품질을 보장하기 위해서 표준을 정해야 함.
-> '프레임워크'

개발자들이 똑같은 환경에서 작업을 하므로 결과물도 같아지고, 상향평준화가 가능해진다.

==============================

프레임워크 : 골격이나 근간을 이루는 코드들의 묶음.
개발자는 각 개개인의 능력 차이가 큰 직종이고, 개발자 구성에 따라 프로젝트 결과 역시 큰 차이를 낳는다. 이런 상황을 극복하기 위한 코드의 결과물이 바로 프레임워크이다.
프로그램의 기본 흐름이나 구조를 정하고 모든 팀원이 이 구조에 자신의 코드를 추가하는 방식으로 개발하게 된다.

프레임워크의 장점
개발에 필요한 구조를 이미 코드로 만들어 놓았기 때문에, 실력이 부족한 개발자라고 하더라도 반쯤 완성된 상태에서 필요한 부분을 조립하는 형태의 개발이 가능하다.
회사 입장에서는 프레임워크를 사용하면 일정한 품질이 보장되는 결과물을 얻을 수 있고, 개발자 입장에서는 완성된 구조에 자신이 맡은 코드를 개발해서 넣기 때문에 개발 시간을 단축할 수 있다.

ex. 컬렉션 프레임워크를 사용하여 같은 구조의 클래스와 같은 이름의 메소드를 쓴다.
ex. 마이바티스 프레임워크를 사용하여 같은 배포자와 형식으로 DB와 연동한다.



초기의 프레임워크는 기능이 너무 많아서 용량도 크고 라이브러리를 선별적으로 사용할 수도 없었다. 곧이어 Spring이 등장하면서 기존의 프레임워크와 호환되면서 용량을 줄이고 가볍게 개발할 수 있게 되었다.

스프링 프레임워크 : 경량(light-weight) 프레임워크. 예전 프레임워크는 다양한 경우를 처리할 수 있는 다양한 기능을 가지도록 만들다 보니 하나의 기능을 위해서 너무 많은 구조가 필요했다.
기술이 너무나 복잡하고 방대했기 때문에 전체를 이해하고 개발하기에 어려움이 많았다. 그래서 스프링 프레임워크가 등장했고, 특정 기능을 위주로 간단한 JAR 파일 등을 이용해서 모든 개발이 가능하도록 구성되어 있다.

