// 테스트 파일에서 선언한다.
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
@Log4j

또는 @RunWith(SpringRunner.class)

// root-context.xml이 스캔할 수 있다. Spring이 관리할 수 있게 등록한다.
@Component

// lombok 기능으로, 기본적인 메소드를 생성 및 오버라이딩해준다.
@Data

// Setter 주입을 하기 위해 사용한다.
@Getter

// 모든 필드에 대하여 생성자를 만든다.
@AllArgsConstructor

// final 키워드 또는 @NonNull이 선언된 필드에 대하여 생성자를 만든다.
@RequiredArgsConstructor

// 상속 관계에 있는 클래스는 부모 타입을 가지고 있기 때문에 부모 타입으로만 선언되어 있으면 "부모 타입을 가진 여러 클래스" 중 어떤 클래스를 주입해야 할지 알 수 없다.
// 그때 클래스를 특정하여 선언 또는 사용하기 위해 사용한다.
@Qualifier("Vips")

// Qualfier 대상인 클래스들 중에서 기본값을 지정한다.
@Primary

// ApplicationContext에게 객체를 맡긴다
@Autowired

// Null이 될 수 없다. RequiredArgsConstructor로 해당 필드에 대한 생성자를 만들 수 있다.
@NonNull

// test 경로에서 단위 테스트를 한다.
@Test

// 메소드를 재정의한다.
@Override

@Controller

@RequestedMapping

@GetMapping

@PostMapping

@RequestParam

@ModelAttribute

@ControllerAdvice

@ExceptionHandler(Exception.class)

@ExceptionHandler(NoHandlerFoundException.class)

@ResponseStatus(HttpStatus.NOT_FOUND)

@Mapper

@Service(service와 serviceImple에 선언한다.)

@Repository(dao와 daoImple에 선언한다.)

@Before
@After(단위테스트의 순서를 제어한다.)

@WebAppConfiguration

@DeleteMapping
@PutMapping
@PatchMapping

@Param