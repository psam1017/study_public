<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- bean : bean 객체를 만들 수 있다. JDBC는 이를 데이터 소스 객체에 전달해줘야 사용할 수 있다. -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
	<!-- 
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:XE"></property>
	 -->
		<!-- 쿼리 결과를 테이블로 Console에 출력해준다. 이제 log4j의 레벨을 설정한다. log 출력이 너무 많다! -->
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:XE"></property>
		<property name="username" value="hr"></property>
		<property name="password" value="hr"></property>
	</bean>
	
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<!-- 이쪽은 생성자로 생성한 것이다. -->
		<constructor-arg ref="hikariConfig"></constructor-arg>
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 이쪽은 setter로 값을 받은 것이다. -->
		<property name="dataSource" ref="dataSource"></property>
		
		<!--
			mapper 파일을 찾는 경로가 src/main/java와 같으면 너무 경로도 복잡하고 찾기 힘들다.
			따라서 아래와 같이 mapper들을 찾도록 지정해준다.
		-->
		<property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml"></property>
		<property name="configLocation" value="classpath:config/config.xml"></property>
	</bean>
	<!-- 아래 탭 중 Beans Graph에서 bean들의 관계를 확인할 수 있다. -->
	
	<mybatis-spring:scan base-package="com.example.ex01.mapper"/>
</beans>
