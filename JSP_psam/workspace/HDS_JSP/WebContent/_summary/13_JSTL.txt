JSTL과 EL
자바 구문을 라이브러리 형태로 만들어 놓고, 필요할 때마다 태그로 꺼내 쓰는 기술.
즉, HTML 문서에서는 스크립트 태그로 java코드를 전혀 쓰지 않고, 무조건 태그만 사용한다.

JSP 페이지 안에서 HTML과 태그만 사용하여 일관되게 소스코드를 작성할 수 있다.

EL(Expression Language)
값을 간결하게 출력해줄 수 있는 기술

자바 : <%=name%>, <%=member.getName()%>
EL : ${name}, ${member.getName()}

프로그램이 값을 찾을 때는 작은 scope에서 큰 scope로 찾는다.
page -> request -> session -> application

원하는 스코프의 변수를 찾을 때는 '스코프범위.변수명'과 같이 사용한다.
아래 3가지는 자주 사용되는 scope 범위이다.
${param.var} : ★GET 방식. '쿼리 스트링'으로 전달된 파라미터를 받을 때 사용한다.
${requestScope.var} : request.setAttribute(key, value)를 통해 저장된 파라미터를 받을 때 사용한다.
${sessionScope.var} : session.setAttribute(key, value)를 통해 저장된 파라미터를 받을 때 사용한다.

추측컨대, EL의 기본 scope는 request인 것 같다. request에 찾는 변수가 없다면, 현재 영역보다 더 넓은 scope로 이동하여 찾는다. request -> session -> application. 따라서 page에 있는 request는 직접 param으로 명시해줘야 찾아갈 수 있다.



EL 연산자
%(mod)
%%(and)
||(or)
>(lt)
<(gt)
>=(le)
<=(ge)
==(eq)
!=(ne)
empty(값이 있으면 false, 값이 없으면 true)
!(not)



JSTL(Jsp Standard Tag Library)
연산, 조건문, 반복문 등을 편하게 처리할 수 있다.
JSP 안에서 자바 코드를 사용하지 않고 로직을 구현할 수 있다.



*c는 core의 약자.
<c:forEach var="변수명" items="${Iterator}">
	HTML 코드
</c:forEach>

<c:forEach var="변수명" begin="초기값" end="끝값">
	HTML 코드
</c:forEach>



JSTL 라이브러리 다운로드 주소
http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/

-> jakarta-taglibs-standard-1.1.2.zip를 다운로드

-> 압축을 해제한 후 lib 폴더에서 jar를 찾아서
	WEB-INF - lib에 삽입하고,
	프로젝트 환경설정 - Build Path - library에 Class Path에 추가 및 적용을 해야 함.

-> JSP에 JSTL 라이브러리 추가
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>





core태그의 종류

<c:set> : 변수에 값 대입
<c:out> : 값 출력

<c:set var="var" value="value" scope="scope"></c:set>
변수 var과 그 값으로 value를 선언하며, 이 변수의 스코프, 즉 유효범위는 이 페이지이므로, 이 페이지를 벗어나는 순간 사용할 수 없게 된다. 예를 들어, scope가 page라면, 이 변수는 request로 다른 페이지에 전달해 줄 수 없다.

<c:set var="nation" scope="session">Korea</c:set>
nation의 값은 innerText인 Korea이다.

<c:out value="${var}"></c:out>
var 변수의 값을 출력한다.

<c:out value="\${name}"></c:out>
달러 문자를 쓰고 싶으면 '\$' 또는 '$dollar;'와 같이 사용한다.

EL문이 더 편해보이는데, 굳이 c:out을 사용하는 이유는 다음과 같다.
1. "엄격한 태그 규칙"을 지키기 위해 모든 표현을 태그로 사용하자는 것이다.
2. EL문 안에서 html 또는 스크립트 형식으로 만든 문장이나 파일을 실행할 수 있는데,
이렇게 되면 EL 안에서 랜섬웨어를 심어 실행하게 하는 문장을 넣는 등 악용이 가능하다.
c:out은 악성코드의 침입 등을 방지하기 위해 명령어를 모두 태그를 받고자 하는 취지에서 만들어졌다.
그리고 이는 escapeXML 옵션을 통해 가능하다. escapeXML은 default가 true이며,
값으로 스크립트나 html이 작성되어도 실행 가능한 명령어가 아니라 문자열 값으로 인식하게 된다.

이외의 다양한 예제는 예제파일을 참고하자.





<c:if> : 조건문(if문)

<c:choose> : 조건문(switch문 시작을 알림)
<c:when> : switch문에서 case의 역할(break를 사용할 필요 없다).
<c:otherwise> : switch문에서 default의 역할

<c:forEach> : 반복문(for문)
