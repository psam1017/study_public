Servlet.

과거 Applet이 클라이언트 측에서 실행 파일을 내려받는다는 단점을 극복하기 위해 만들어진 애플리케이션 기술이다. 
JAVA 코드 안에서 HTML 코드를 작성할 수 있다. 근데, 진짜 HTML 코드를 만들려고 하면 매번 메소드를 실행하고 그 안에 태그를 넣어야 해서 생산성이 매우 떨어진다.
 

JSP. Java Server Page

HTML을 중심으로 자바와 연동하여 사용하는 애플리케이션 기술이다.
기능적으로는 서블릿과 동일하다. 실제로 JSP는 실행되면 서블릿으로 변환된다.
하지만 아래와 같은 차이가 있다.
1. HTML 코드 안에 JAVA 코드를 작성할 수 있다.
2. 일부 객체는 변수 선언과 초기화 없이 사용할 수 있다. 이들을 내장 객체라고 부른다.
3. 서블릿은 컨트롤러 페이지를 만들 때 사용하지만, JSP는 뷰 페이지를 만들 때 사용한다.
	즉, 서블릿은 데이터를 교환하고 처리하는 알고리즘 영역을 담당하는 .java 파일이고,
	JSP는 사용자에게 보이는 화면을 담당하는 HTML 안에서 작성되는 .jsp 파일이다.

----------------------------------------------------------------------

서버 / 클라이언트 / 웹

클라이언트가 요청requset하면 서버는 응답response한다. 이러한 페이지 요청과 응답이 일어나는 장소가 웹이다. 사람들은 인터넷으로 연결된 컴퓨터를 통해 정보를 공유할 수 있다.

----------------------------------------------------------------------

웹 서버 -> 아파치 사용

1. 사용자에게 정적 데이터를 보내준다.
2. 사용자의 요청이 정적 데이터인지 동적 데이터인지 판단한다.
	웹 서버는 연산을 할 수 없으므로 만약 동적 데이터를 요청받는다면, 연산을 담당하는 웹 컨테이너에게 다시 요청한다.


웹 컨테이너(서블릿 컨테이너, JSP 컨테이너) -> WAS의 구성요소 중 하나

1. 요청 받은 동적 데이터를 Servlet, JSP로 연산 및 제어하고, DB에 접근하여 정적 데이터로 만들어 응답한다.
2. 통신 지원, CGI 대체, 멀티 스레딩 지원, 보안 관리 등을 한다.
3. 아래와 같이 서블릿의 생명주기를 담당한다.
	서블릿을 메모리에 할당한다.
	POST 방식을 사용할 때 web.xml(배포 서술자)을 참조하여 해당 서블릿에 대한 Thread를 생성한다.
	연산이 종료되면 이를 메모리에서 해제시킨다.

~> (CHM에서 추가)예를 들어, 웹 컨테이너는 Hello.jsp를 받아서 Hello_jsp.java(servlet)를 만들고, 이를 컴파일하여 최종적으로 Hello_jsp.class를 만들어서 웹 서버에 전달한다.
~> 컴파일을 하면 workspace의 .metadata에서 *.java와 *.class로 변형되어 있는 파일을 찾아볼 수 있다.

WAS. Web Application Server -> 톰캣 사용

웹 서버와 웹 컨테이너를 모두 관리해주는 프로그램이다. 웹 서버와 웹 컨테이너가 직접 서로에게 요청과 응답하지 않고, WAS에게 요청과 응답을 하게 된다.
