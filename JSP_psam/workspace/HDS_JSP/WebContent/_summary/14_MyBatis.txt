DBCP(DataBase Connection Pool)
기존의 JDBC는 단순히 DB와 java를 연결할 뿐이었다.
이 뜻은 요청을 할 때마다 DB를 연결하겠다는 뜻이며,
그 때마다 DB를 연결하면 코드도 복잡해지고 연결 속도가 저하될 수도 있다.
->
"DBCP는 미리 Connection을 만들어 두고", 필요 시 저장해둔 공간에서 가져와 사용하고 사용이 끝나면 반납하는 기법이다.
ByBatis를 사용하면, 관련된 Connection Pool을 자동으로 설정한다. -> 수업에서 생략.

JNDI(Java Naming and Directory Pool)
디렉토리 서비스에서 제공하는 데이터 및 객체를 발견하고, 참고하기 위한 자바 API.
외부에 있는 객체를 가져오기 위한 기술이며, java에서 DBCP 등을 가져오기 위해 사용해야 한다.



MyBatis Framework
소스코드 안에서 SQL 문을 작성하면 코드가 길어지고, 유지보수 및 분업이 어렵다.
->
SQL과 java를 분리하는 기술이다.
SQL 문을 XML 파일에 작성하여 코드가 줄어들고, SQL문 수정이 편해진다.
DBCP를 사용하여 커넥션을 여러 개 생성하기 때문에, JDBC보다 작업 효율과 가독성이 좋아진다.



Mybatis 작동 순서
(요청 전)
1) 응용 프로그램이 SqlSessionFactorybuilder를 통해 SqlSessionFactory를 빌드하도록 요청한다.
2) SqlSessionFactoryBuilder는 SqlSessionFactory를 생성하기 위한 MyBatis Config 파일(구성 파일)을 읽는다.
3) SqlSessionFactoryBuilder는 MyBatis 구성 파일의 정의에 따라 SqlSessionFactory를 생성한다.
4) 클라이언트가 응용 프로그램에 대한 프로세스를 요청한다.
(요청 후)
5) 응용 프로그램은 빌드된 SqlSessionFactory에 SqlSession을 요청한다.
6) SqlSessionFactory는 SqlSession을 생성하고 이를 응용 프로그램에 반환한다.
7) 응용 프로그램이 SqlSession에서 매퍼 인터페이스의 구현 개체를 가져온다.
8) 응용 프로그램이 매퍼 인터페이스 메소드를 호출한다.
9) 매퍼 인터페이스의 구현 객체가 SqlSession의 메소드를 호출하고 SQL실행을 요청한다.
10) SqlSession은 매핑 파일(XML)에서 실행할 SQL을 가져와서 실행한다.

-> myBatis package로 실습