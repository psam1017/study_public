JSP만을 사용한다면?

[jsp 방식] -> jsp 파일만으로 요청, 연산, 반환(반응) 및 선언까지 모두 구현.
	a.jsp(요청) --> b.jsp(연산) --> c.jsp(반환)

	각 페이지마다 필요 시 자바 코드가 작성되며, DB와 연결하는 코드도 jsp 파일 안에서 모두 작성된다.
	분리되어 있지 않기 때문에 규모가 작은 프로젝트에 어울리는 방식이며
	코드가 확장될 수록 가독성이 떨어지고 분업과 유지보수가 좋지 않다.



소프트웨어 디자인 설계 패턴

MVC
	-Model : 데이터 조회 결과값을 저장할 객체(VO, DTO)
	-View : 화면구현(html, jsp, css, js,..)
	-Controller : 데이터베이스에 접근할 수 있는 코드가 담긴 객체(DAO)

	*VO : Value Object, 조회 결과를 저장한 객체.
	*DTO : Data Transfer Object, 계층(Controller, View, Layer 등) 간에 데이터를 교환하는 객체.
	*DAO : Data Access Object. data를(=VO를) DB에 접근시킬 수 있는 코드가 담긴 객체.



[model1 방식] -> b.jsp에서 선언부를 DAO로 분리. b.jsp에서는 사용만 함.
	a.jsp --> b.jsp(↔DAO.java) --> c.jsp

	b.jsp에서 dao를 호출함으로써 자바코드가 섞이게 된다.
	선언은 분리되어 java페이지에 구현이 되기 때문에 jsp내의 java코드 양이 줄어들지만
	결국 사용은 jsp페이지(b.jsp)에서 하기 때문에 Controller와 View가 섞이게 된다.
	페이지가 확장될 수록 유지보수가 상대적으로 좋지 않지만 설계는 쉽다.



[★model2 방식] -> 사용 부분까지 세부적으로 분리함.
	
	a.jsp --> web.xml(확장자로 구분. ex".news") --> Front_Controller.java(컨트롤러 분기 처리 ex."update controller")
		--(연산 후 forward or redirect)--> c.jsp

	Front_Controller.java ↔ CRUD_Controller.java // 하나의 컨트롤러는 하나의 기능만 구현

	(Controller.java ↔ DAO.java ↔ DB)
	
	*Front_Controller는 요청이 CRUD 중 어느 부분에 해당하는지 분기를 처리하여 해당하는 Controller로 데이터를 보낸다.


	
	1. a.jsp에서 다음 페이지(c.jsp)로 이동하기 전 필요한 비지니스 로직을 완벽히 분리하여 관리한다.

	2-1. 사용자가 정의한 확장자(.board, .news, ...)를 페이지 이동 주소(URL)에 작성하게 되면 web.xml에 가서 경로를 찾는다.
	2-2. web.xml에 파일 경로를 하나씩 모두 만들게 되면 코드가 길어지기 때문에
		"*.확장자(ex. *.me)"가 붙은 모든 요청을 하나의 경로로 보내주도록 설정한다.
	2-3. 이 경로를 알맞는 Front-Controller.java 경로로 설정한다.
	2-4. 즉, web.xml은 확장자에 따라 요청을 적절한 Front-Controller로 보내기만 할 뿐이며,
		어떤 기능을 수행할지 분기 처리는 Front-Controller가 수행한다.

	3-1. Front-Controller에서는 들어온 요청에서 ".확장자" 앞의 요청명으로 어떤 로직을 수행할지를 판단하도록 분기처리를 한다.
	3-2. 비지니스 로직을 Front-Controller에서 작업하게 되면 마찬가지로 코드가 길어지고 유지보수 및 재사용이 어렵기 때문에
		요청별 Controller를 만들어서 execute()메소드를 구현한다.
	3-3. 따라서 execute()메소드를 모든 Controller에 구현해야 하기 때문에
		Controller의 인터페이스를 선언하여 추상메소드 형태로 execute()를 선언해 놓고
		각 Controller에게 지정하여 구현하도록 한다.
	3-4. execute()내부에서의 작업들(DB에 접근하는 작업)은 DAO에 메소드를 구현해 놓고 각 Controller는 이를 사용하기만 한다.

	4-1. 내부 작업이 모두 완료되면 페이지를 이동할 것인지, 어떤 방식(forward or redirect)으로 할 것인지,
		그리고 어디로 이동할 것인지를 결정해서 리턴해야 한다.
	4-2. 이에 관련된 필드를 Forward 객체에 만들어 놓고 execute()의 리턴 타입을 Forward로 지정한 후
		Controller의 execute()를 Front-Controller에 리턴해준다.
	4-3. Front-Controller에서는 Forward 객체에 담긴 결과를 알맞게 처리한 후 View로 이동하게 된다.

	- Redirect(request 객체를 초기화)
		Web Browser --> 결제 페이지 --> 새로 고침(뒤로 가기)하면 --> (결제를 실행하지 않는)결제 페이지

		클라이언트가 요청했을 때 이전의 값이 남아있지 않도록 하기 위해 사용한다.
		회원가입, 글 작성, 결제 등

	- Forward(request 객체 유지)
		Web Browser --> 검색 페이지 --> 새로고침(뒤로 가기)하면 --> 검색 결과 페이지

		클라이언트가 request 객체를 통해 값을 전달해야 할 때 혹은 단순 조회를 요청할 때 사용한다.
		Redirect보다는 성능이 좋다.
		목록, 검색 등
