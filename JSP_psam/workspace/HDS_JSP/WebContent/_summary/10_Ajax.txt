Ajax(Asynchronus Javascript and XML)
웹 페이지 전체를 로딩하지 않고도 웹 페이지 일부분만을 갱신할 수 있는 기술.
백그라운드 영역에서 서버와 통신하고 그 결과를 표시할 수 있다.
이때 아래와 같은 데이터를 주고 받을 수 있다.

-JSON
-XML
-HTML
-텍스트파일

Ajax의 장점
1. 웹 페이지 전체를 다시 로딩하지 않고 일부분만을 갱신할 수 있다.
2. 웹 페이지가 로드된 후에 서버로 데이터 요청을 보내거나 받을 수 있다.
3. 다양한 UI(동적 페이지) 구현이 가능해진다.

Ajax의 단점
1. 페이지 이동이 없기 때문에 히스토리 관리가 안된다.
2. 반복적인 데이터를 요청하면 느려지거나 작동하지 않게 된다.
3. 페이지의 이동이 없다는 것은 보안 상의 문제도 발생할 수 있다는 것이다.



Ajax를 구현하기 위해 여러 요소들이 필요하다.
HTML, CSS, JS, DOM과 더불어서 백그라운드 영역에서는
데이터 교환을 위한 JSON 또는 XML,
웹 서버와 비동기 통신을 하기 위한 XMLHttpRequest가 필요하다.

1. 객체를 생성한 후 open()으로 서버로 보낼 Ajax 요청 형식을 설정한다.
1-1. 만약 POST 방식으로 설정했다면, setRequestHeader()를 실행한다.
2. 요청된 작성은 send()로 서버에 전달한다. POST 방식이라면 전달 방식을 지정한다.
3. readyState가 DONE이고, status가 200 또는 201이라면 통신에 성공한 것이므로, 실행할 코드를 작성한다.

아래 예제를 잘 참고하자.

(GET 방식의 요청)

function sendRequest(){
	var xhr = new XMLHttpRequest();
	xhr.open("GET", "02_request_ajax_get.jsp?city=Seoul&zipcode=12345", true);
	xhr.send();
	
	xhr.onreadystatechange = function(){
		if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200){
			document.getElementById("text").innerHTML = xhr.responseText;
		}
	}
}

(POST 방식의 요청)

function sendRequest(){
	var xhr = new XMLHttpRequest();
	
	xhr.open("POST", "04_request_ajax_post.jsp", true);
	xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
	xhr.send("city=Seoul&zipcode=12345");
	
	xhr.onreadystatechange = function(){
		if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200){
			document.getElementById("text").innerHTML = xhr.responseText;
		}
	}
}
