쿠키 : 서버에 저장하는 데이터 조각

쿠키를 만드는 주체는 서버다.

브라우저가 요청하면 쿠키를 만들고, 응답을 해야 하니까 response 헤더 안에 Cookie를 담아서 브라우저에게 돌려주고, 브라우저가 로컬에 저장한다.
이 쿠키는 나중에 또 request할 때 헤더 안에 담겨서 서버에 보내진다.

쿠키는 두 가지 종류가 있다.
유효 시간 동안 브라우저에서 유지하는 쿠키 -> 세션 쿠키(로그인 역할, 브라우저를 식별, 브라우저가 닫히면 같이 없어짐)
영구적(Permanent) 쿠키 -> 브라우저가 닫혀도 일정 시간 동안 유지되는 쿠키(비회원 장바구니, 맞춤형 광고, ID 기억하기)

====================================================================================================================

쿠키 생성하기

<%
/*
	쿠키는 서버에서 생성하고 브라우저에 응답하여 저장하는 데이터 조각이다.
	브라우저는 저장한 쿠키를 해당 사이트에 자원 요청 시 포함하여 전송한다.
	브라우저가 사이트를 이용하면서 유지할 값이 있다면 사용하게 된다.

	1. 브라우저에서 서버로 자원을 요청
	2. 서버에서 쿠키 생성 및 응답에 포함
	3. 브라우저는 응답 받은 쿠키를 저장소에 저장
	---
	4. 해당 사이트로 요청 시 쿠키를 함께 전송
	5. 요청에서 쿠키 정보를 확인



	쿠키의 구성 요소
	이름 : 쿠키 이름
	값 : 이름에 연결된 값
	유효시간 : 설정하면 해당 시간 동안 유지(초 단위, 날짜로 설정)
		-> 설정하지 않으면 세션이 유지되는 동안 같이 유지됨.
	도메인 : 쿠키를 생성한 사이트
	경로 : 쿠키를 전송할 요청 URL(일반적으로 최상위 경로)

	Cookie의 getter로 여러 가지 정보를 받아올 수 있다.
	getDomain : 도메인 정보
	getMaxAge : 쿠키 유지 기간
	getName : 쿠키의 이름
	getPath : 쿠키를 전송할 경로
	getValue : 쿠키의 값
*/
	Cookie cookie1 = new Cookie("name", "psm");
	Cookie cookie2 = new Cookie("age", "20");
	System.out.print("name : " + cookie1.getValue());

	response.addCookie(cookie1);
	response.addCookie(cookie2);
	// 이러한 쿠키들은 개발자 도구의 Network, Application, Storage 등에서 내용을 확인할 수 있다.
%>

<%
	Cookie[] cookies = request.getCookies();
	for(Cookie cookie : cookies){
%>
		<%= cookie.getName() %> : <%= cookie.getValue() %> <br>
<%
	}
%>

====================================================================================================================

쿠키 수정하기

<%
/*
	쿠키는 Map처럼 이름과 값으로 저장된다.
	따라서 이름으로 쿠키를 찾아서 값을 수정할 수 있다.
*/
	Cookie[] cookies = request.getCookies();
	if(cookies != null && cookies.length > 0){
		for(int i = 0; i < cookies.length; i++){
			if(cookies[i].getName().equals("age")){
				response.addCookie(new Cookie("age", "27"));
			}
		}
	}
/*
	이때 Request Headers에는 이전 age 값을 가지고 있고,
	Response Headers에 새로 변경된 age 값을 가지게 된다.
*/
%>

====================================================================================================================

쿠키 삭제하기

<%
/*
	쿠키를 따로 삭제하는 기능은 없다.
	삭제하려면 쿠키를 찾아서 유효 기간을 0초로 만든다.
	이후 다른 페이지로 이동할 때 해당 쿠키는 브라우저에 의해 버려진다.
*/
	Cookie[] cookies = request.getCookies();
	if(cookies != null && cookies.length > 0){
		for(int i = 0; i < cookies.length; i++){
			if(cookies[i].getName().equals("age")){
				new Cookie("age", "").setMaxAge(0);
			}
		}
	}
%>

====================================================================================================================

쿠키의 필드 중 path를 어떻게 다루는지

<%
	Cookie cookie3 = new Cookie("job", "student");
	cookie3.setPath(pageContext.request.contextPath + "/path");
/*
	path : 특정 경로를 설정. 설정하지 않은 경우 최상위 경로를 사용.
	pageContext.request.contextPath + "/path" : "도메인/path"라는 경로에서만 사용
*/
%>

====================================================================================================================

쿠키의 필드 중 maxAge를 어떻게 다루는지

<%
	Cookie cookie4 = new Cookie("hobby", "pokemon");
	cookie4.setMaxAge(60 * 60 * 24 * 365); // 1년 동안 유지하기
	response.addCookie(cookie4);
/*
	쿠키는 유효시간이 지나면 다시 사용할 수 없다.
	브라우저에 저장되는 쿠키는 유효시간이 있다.
	시간을 지정하지 않으면 '세션쿠키'가 되어 세션이 종료되면 삭제된다.
	시간을 지정하면 '영구적 쿠키'가 되어 브라우저를 닫아도 해당 시간 동안은 유지된다.
*/
%>
