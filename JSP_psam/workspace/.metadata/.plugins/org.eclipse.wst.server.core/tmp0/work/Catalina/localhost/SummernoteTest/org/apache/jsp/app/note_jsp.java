/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2023-02-09 04:24:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.app;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class note_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/standard.jar", Long.valueOf(1675914531679L));
    _jspx_dependants.put("jar:file:/C:/Users/HP/Desktop/Coding/JSP_psam/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/summerNoteTest/WEB-INF/lib/standard.jar!/META-INF/c.tld", Long.valueOf(1098678690000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("  <title>SummerNoteExample</title>\r\n");
      out.write("  <meta charset=\"utf-8\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\r\n");
      out.write("  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js\"></script>\r\n");
      out.write("  <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\r\n");
      out.write("  \r\n");
      out.write("  <!-- 서머노트를 위해 추가해야할 부분 -->\r\n");
      out.write("  <script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/assets/summernote/summernote-lite.js\"></script>\r\n");
      out.write("  <script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/assets/summernote/lang/summernote-ko-KR.js\"></script>\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/assets/summernote/summernote-lite.css\">\r\n");
      out.write("  \r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<form action=\"\" method=\"post\" id=\"contentForm\">\r\n");
      out.write("			<textarea class=\"summernote\" name=\"content\"></textarea>\r\n");
      out.write("			<input type=\"submit\" id=\"submitBtn\" value=\"작성완료\">\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("<script>\r\n");
      out.write("$(document).ready(function() {\r\n");
      out.write("	const contextPath = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\r\n");
      out.write("	const contentForm = document.getElementById(\"contentForm\");\r\n");
      out.write("	const submitBtn = document.getElementById(\"submitBtn\");\r\n");
      out.write("	\r\n");
      out.write("	// content 전송 영역은 \r\n");
      out.write("	submitBtn.addEventListener(\"click\", function(e){\r\n");
      out.write("		e.preventDefault();\r\n");
      out.write("		contentForm.action = \"#\";\r\n");
      out.write("		contentForm.submit();\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	// summernote 내용 불러오기. 반드시 초기화 이전에 script 안에서 불러와야 함. 순서에 주의할 것.\r\n");
      out.write("	$(\".summernote\").val(\"");
      if (_jspx_meth_c_005fout_005f0(_jspx_page_context))
        return;
      out.write("\");\r\n");
      out.write("	\r\n");
      out.write("	// summernote 초기화\r\n");
      out.write("	$('.summernote').summernote({\r\n");
      out.write("		// 에디터 높이\r\n");
      out.write("		height: 150,\r\n");
      out.write("		// 에디터 한글 설정\r\n");
      out.write("		lang: \"ko-KR\",\r\n");
      out.write("		// 에디터에 커서 이동 (input창의 autofocus라고 생각하시면 됩니다.)\r\n");
      out.write("		focus : true,\r\n");
      out.write("		toolbar: [\r\n");
      out.write("			// 글꼴 설정\r\n");
      out.write("			['fontname', ['fontname']],\r\n");
      out.write("			// 글자 크기 설정\r\n");
      out.write("			['fontsize', ['fontsize']],\r\n");
      out.write("			// 굵기, 기울임꼴, 밑줄,취소 선, 서식지우기\r\n");
      out.write("			['style', ['bold', 'italic', 'underline','strikethrough', 'clear']],\r\n");
      out.write("			// 글자색\r\n");
      out.write("			['color', ['forecolor','color']],\r\n");
      out.write("			// 표만들기\r\n");
      out.write("			['table', ['table']],\r\n");
      out.write("			// 글머리 기호, 번호매기기, 문단정렬\r\n");
      out.write("			['para', ['ul', 'ol', 'paragraph']],\r\n");
      out.write("			// 줄간격\r\n");
      out.write("			['height', ['height']],\r\n");
      out.write("			// 그림첨부, 링크만들기, 동영상첨부\r\n");
      out.write("			['insert',['picture','link','video']],\r\n");
      out.write("			// 코드보기, 확대해서보기, 도움말\r\n");
      out.write("			['view', ['codeview','fullscreen', 'help']]\r\n");
      out.write("		],\r\n");
      out.write("		// 추가한 글꼴\r\n");
      out.write("		fontNames: ['Arial', 'Arial Black', 'Comic Sans MS', 'Courier New','궁서','굴림체','굴림','돋음체','바탕체'],\r\n");
      out.write("		// 추가한 폰트사이즈\r\n");
      out.write("		fontSizes: ['8','9','10','11','12','14','16','18','20','22','24','28','30','36','50','72'],\r\n");
      out.write("		callbacks : { //여기 부분이 이미지를 첨부하는 부분\r\n");
      out.write("			onImageUpload : function(files, editor, welEditable) {\r\n");
      out.write("				for (var i = files.length - 1; i >= 0; i--) {\r\n");
      out.write("					uploadSummernoteImageFile(files[i], this);\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	// 파일 전송 콜백함수\r\n");
      out.write("    function uploadSummernoteImageFile(file, el) {\r\n");
      out.write("		data = new FormData();\r\n");
      out.write("		data.append(\"file\", file);\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			data : data,\r\n");
      out.write("			type : \"POST\",\r\n");
      out.write("			url : contextPath + \"/upload\",\r\n");
      out.write("			contentType : false,\r\n");
      out.write("			enctype : 'multipart/form-data',\r\n");
      out.write("			processData : false,\r\n");
      out.write("			dataType : \"json\",\r\n");
      out.write("			success : function(result) {\r\n");
      out.write("				$(el).summernote('editor.insertImage', result.url);\r\n");
      out.write("			},\r\n");
      out.write("			error : function(){\r\n");
      out.write("				alert(\"파일 업로드를 실패했습니다. 관리자에게 문의하세요.\");\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fout_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f0_reused = false;
    try {
      _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f0.setParent(null);
      // /app/note.jsp(42,23) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f0.setValue("content-ok");
      int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
      if (_jspx_th_c_005fout_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      _jspx_th_c_005fout_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f0_reused);
    }
    return false;
  }
}
