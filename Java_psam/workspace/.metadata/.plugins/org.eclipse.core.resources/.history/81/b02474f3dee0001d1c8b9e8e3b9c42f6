# SimpleEncryptor
PBKDF2를 활용하여 간단하게 암호화와 인증 기능을 제공하는 암호화 라이브러리입니다.   
   
필요하신 분은 jar 파일만 내려 받아도 사용하실 수 있습니다.   
상세한 사용 방법은 원본 소스 코드와 JavaDoc 주석 및 테스트 코드(예시)를 통해 확인하실 수 있습니다.   
test 패키지를 통해서 사용 예제를 확인해보세요.   
https://github.com/psam1017/SimpleEncryptor/tree/main/src
   
<hr>

### 유의사항   
(1) 매우 간소하지만 필수적인, 암호화 기능과 인증을 위한 비교 기능 2가지만을 제공합니다.   
PBKDF2 라이브러리에 의존하고 있고, password와 salt 2가지의 데이터를 다루고 있습니다. 따라서 암호화 개념과 salt란 무엇인지 이해할 필요가 있습니다.   
이와 관련된 레퍼런스를 소개하오니 참고하시기 바랍니다.   
https://starplatina.tistory.com/entry/비밀번호-해시에-소금치기-바르게-쓰기

(2) 암호화된 password와 salt는 32자 길이의 String으로 return됩니다. 따라서 이를 저장할 Database의 자료형도 이와 동일해야 저장이 됩니다.

```
CREATE TABLE Members   
(   
    ...   
    password VARCHAR(32) NOT NULL,   
    salt     VARCHAR(32) NOT NULL,   
    ...   
);
```
   
<hr>
   
### ps

ps 1.   
시작은 코딩학원에서 진행했던 웹 사이트 프로젝트 꼼수닷컴의 암호화 기능을 만든 것에서부터였습니다.   
당시에는 암호화 기능을 제대로 만들려고 하다가 강사로부터 웹 개발자가 크게 신경 쓸 부분이 아니라는 피드백만 받았었고, 그 당시 암호화 이외에도 달리 해야 할 것이 많아 결국 마무리를 미뤄뒀던 기능인데요.   
실제로 꼼수닷컴 repository에 들어가서 기원이 된 암호화 모듈과 현재 모듈을 비교해본다면 암호문을 저장하는 방식이라든가 결합도 수준 등 차이가 있습니다.   
   
ps 2.   
결합도는 이전보다 더 개선되었지만, 암호문을 저장하는 방식 자체는 이전 모듈과 비교하면 장단점이 있을 것 같습니다.   
이전 모듈의 저장 방식을 따르면 값들이 10진수로 저장되고, (비록 해시 함수를 쓰긴 했지만)저장되는 암호문의 길이가 달라지는 차이가 있습니다.   
만약 이전에 작업했던 암호화 기능이 궁금하다면 방문하셔서 비교해보세요.   
https://github.com/psam1017/ggomsu/tree/main/src/com/ggomsu/system/encrypt
