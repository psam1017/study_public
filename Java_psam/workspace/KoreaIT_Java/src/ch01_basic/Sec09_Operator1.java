package ch01_basic;

public class Sec09_Operator1 {

//	연산자 우선순위 : 최단산시 관리삼대
//	
//	1. 최우선 연산자 : 괄호'()' 안을 먼저 계산함.
//
//	2. 단항 연산자 : ++, --, +, -, ~, !
//		-> +, -는 산술 연산자가 아니라 변수 앞에 붙는 단항 연산자이다. -1. +1 등.
//
//		-> var++(후위형) : 해당하는 줄의 명령어를 모두 수행한 이후 var에 1을 더함.
//		-> ++var(전위형) : 해당하는 줄의 명령어를 수행하기 이전에 var에 1을 더함.
//		-> 컨벤션 가이드에서는 var++ 명령어를 단독으로 실행하기를 권장함.
//
//	3. 산술 연산자 : +, -, *, /, %
//
//	4. 시프트 연산자 : >>, <<
//		-> 이진 연산에 사용한다.
//	
//	5. 관계 연산자 : ==, !=, <, <=, >, >=, instanceof
//		-> child instanceof parnet
//		-> child가 parent의 하위 클래스, 즉 상속받은 객체라면 true를 반환한다.
//
//		-> 문자열을 비교할 때는 equals 메소드를 사용하는 것이 바람직하다.
//		-> 왜냐하면 == 연산자는 객체의 주소 값까지 비교하기 때문이다.
//	
//	6. 논리 연산자 : &, ^, |, &&, ||, !
//		-> &&, ||, !를 사용한 연산의 결과는 boolean 값이다.
//	
//	7. 삼항 연산자 : condition ? value_if_true : value_if_false
//	
//	8. 대입 연산자 : =, +=, -=, *=, /=, %=, >>=, <<=, &=, ^=, |=
//	
//	
//	
//	비트 연산자 : &, |, ^, ~, <<, >>
//	|(OR연산자) : 피연산자 중 한 쪽의 값이 1이면 1을 결과로 얻는다.
//	&(AND연산자) : 피연산자 양 쪽 모두 값이 1이면 1을 결과로 얻는다.
//	^(XOR연산자) : 피연산자의 값이 서로 다를 때만 1을 얻는다. 한 쪽이 1이면 다른 한 쪽은 0이어야 한다.
//		-> Exclusive OR 연산자라고 한다.
//	~(NOT연산자) : 2진수로 표현했을 때의 피연산자 부호를 바꾼다. 1의 보수 연산자라고도 한다.
//		-> ~p = -p - 1
//			-> (ex) ~p + p + 1 = 0이므로 위 내용이 증명된다. 이때 "-p는 p의 '1의 보수'"라고 표현한다. 
//			-> 11110101(2) + 00001010(2) + 00000001(2) = 00000000(2)
//	<<, >>(시프트 연산자) : 10진수 정수의 2진수 비트값을 왼쪽 또는 오른쪽으로 주어진 숫자만큼 이동시킨다.
}
