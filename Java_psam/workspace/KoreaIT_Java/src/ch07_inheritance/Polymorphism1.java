package ch07_inheritance;

public class Polymorphism1 {
	
//	다형성 : 여러 형태를 가질 수 있는 성질. 객체지향언어에서는 객체의 자료형을 변경함을 의미함.
//	-> JAVA에서는 업캐스팅이 가능함. 즉, 부모 타입 참조변수는 자식 클래스 인스턴스를 참조할 수 있음.
//	
//	1. 클래스의 형변환
//	-부모가 자식을 참조하는 형변환, 즉 업캐스팅은 자동임.
//	-자식이 부모를 참조하는 것은 불가능. 따라서 다운캐스팅을 하려면
//		명시적 형변환을 통해 부모 클래스 인스턴스의 타입을 바꿔야 함.
//	
//	2. 참조변수의 타입이 쓸 수 있는 멤버보다 참조하는 인스턴스의 멤버가 더 많아야 한다.
//	- 클래스 타입을 게임기, 인스턴스를 게임 패키지로 비유하자면,
//		-> PS4를 가지고 PS4 + PS5 게임 패키지를 구매하는 건 가능은 하다. 다만, PS5 게임을 할 수는 없다.
//		-> PS5를 가지고 있는데, 게임 패키지를 샀더니 PS4 게임만 들어있으면 PS5를 살 필요가 없다.
//			-> 선언한 클래스 타입보다 더 적은 멤버를 가진 인스턴스를 참조할 수 없다.
//		
//		-> PS4로 업그레이드하기 위해 PS3의 하드웨어만 중고로 구매하는 건 괜찮지만,
//			 PS3 패키지가 이미 들어있는 게임기를 더 비싸게 구매할 필요는 없다.
//			-> 이미 부모 타입 인스턴스를 참조하는 참조변수는 명시적 형변환으로 자식 타입 참조변수에 대입할 수 없다.
//			Parent p = new Parent();
//			Child c = null;
//			c = (Child)p; // 에러 발생.
//			-> Child p = new Parent와 같은 일이 발생하기 때문.
//		
//	3. 업캐스팅하면 부모 클래스의 메소드를 쓰지 않고, 자식 클래스에서 오버라이드된 메소드를 쓴다.
//		-> ch_08 - abstractWork의 Pokemon 참고.
//	
//	4. 다형성을 쓰는 이유
//	-다수의 자식 클래스를 사용할 때 부모 클래스 타입의 참조변수만으로 자식 클래스들을 사용할 수 있다.
//		-> Polymorphism3 참고
//	-다수의 자식 클래스를 배열로 관리할 때 사용할 메소드를 부모 타입 하나만으로 각 자식 클래스의 메소드를 호출할 수 있다.
//			-> Instanceof3, PolymorphismWork2의 Test2 참고.
}
