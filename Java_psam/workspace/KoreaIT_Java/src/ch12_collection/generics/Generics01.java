package ch12_collection.generics;

public class Generics01 {

//	Generics : 모든 종류의 타입(클래스)을 사용할 수 있게 하는 기법. 일반화한다고 함.
//	
//	일반화 : 제네릭 문법을 사용하면 단 하나의 클래스로 형변환 없이 특정 타입 전용 클래스로 만들 수 있다는 뜻.
//		-> 같은 기능을 하지만 타입이 다른 여러 클래스를 만들지 않아도 된다.
//		-> 클래스나 메소드 내부에서 사용되는 객체의 타입 안정성을 높일 수 있다.
//		-> 반환값에 대한 타입 변환 및 타입 검사에 들어가는 노력을 줄일 수 있다.
//	
//	1. 클래스를 만들 때, 아래와 같은 제네릭을 생성.
//		<E> : Element, 컬렉션에서 요소를 표시할 때 많이 사용.
//		<K>, <V> : Key, Value를 의미. Map에서 많이 사용.
//		<T> : Type(클래스)을 의미.
//		<N> : Number를 의미. 수치 계열의 의미. 여러 개를 사용할 수 있으며 각 타입 매개변수 뒤에 2, 3 등 숫자를 붙임.
//	
//	2. 이후, 해당 클래스를 사용할 때 구체적으로 사용할 클래스를 명시한다.
//		<클래스명> : 클래스 타입의 객체로 '구체화'한다.
//	
//	
//	
//	220828 내용 추가 : 
//	1. 클래스, 메소드에 사용이 가능하다. -> Generics03 참고
//	2. 제네릭도 상속과 구현을 할 수 있다. -> Generics04 참고
}
