package ch08_abstract_interface_innerclass.innerClassWork;

public class InnerClass1 {
	
//	Tip : 내부 클래스는 접근성이 중요하다. 따라서 클래스 멤버와 인스턴스 멤버의 특징을 잘 떠올려야 한다.
//	
//	내부 클래스 : 클래스 안에서 클래스를 생성.
//	여러 클래스를 생성하다 보면, 같은 Hierarchy에 있는 몇몇 클래스는 특정 클래스에서만 사용하게 된다.
//		-> 관계가 긴밀한 상태.
//		-> 외부에서 클래스를 가져올 때, 이 클래스가 어디에서 사용하는지 일일이 확인해야 함.
//		-> 클래스를 외부에서 별도로 가져오는 과정이 필요함.
//			-> 이를 여러 클래스와 동일한 경로에 두지 않고 특정 클래스 안에 넣어두려는 의도로 사용한다.
//		-> 하나의 클래스 내부에 클래스를 감추어 캡슐화가 가능하다.
//
//	
//	
//	내부 클래스 종류, 특징
//	인스턴스 클래스 :  외부 클래스의 멤버 위치에 선언. 인스턴스 멤버들과 상호작용.
//	스태틱 클래스 : 외부 클래스의 멤버 위치에 선언. 스태틱 멤버들과 상호작용.
//	지역 클래스 : 클래스 안의 메소드 안의 클래스. 임시로 사용하여 지역 멤버들과 상호작용.
//	
//	외부 클래스는 원래 public, default만 가능하지만,
//	내부 클래스는 멤버변수와 같이 다루어지기 때문에 접근 제어자를 모두 사용할 수 있다.
//	
//	
//	
//	내부 클래스에 대한 멤버의 접근성
//	- 스태틱 멤버는 인스턴스 클래스에 접근 불가. 내부 스태틱 클래스에 접근 가능.
//		-> 외부 클래스의 객체 생성 이전에 내부 인스턴스 클래스 객체를 만들 수는 없다.
//		-> InnerClass2, 3 참고.
//	- 인스턴스 멤버는 인스턴스 클래스, 스태틱 내부 클래스 모두 접근 가능.
//
//
//
//	내부 인스턴스 클래스의 생성은 곧 외부 클래스 인스턴스도 이미 생성되었다는 뜻이므로,
//		-> 내부 인스턴스 클래스에서는 외부 클래스 멤버를 사용할 수 있다.
//		-> InnerClass4 참고.
//	스태틱 내부 클래스는 외부 클래스 인스턴스 없이도 생성이 가능하므로,
//		-> 내부 스태틱 클래스에서는 외부 클래스 멤버를 사용할 수 없다.
//		-> InnerClass5 참고.
//	
//	
//	
//	구조 상 인스턴스 생성 없이 static을 만들 수 없어서 내부 인스턴스 클래스 안에 static을 사용할 수 없었지만,
//	자바 16버전(2021-03)부터는 내부 인스턴스 클래스 안에 static 키워드를 사용할 수 있음.
//	
//	지역 클래스 : 지역 변수처럼 메소드 내부에 클래스를 정의하여 사용.
//	- 지역 내부 클래스에서 사용하는 메소드의 지역 변수는 모두 상수로 바뀜.
//		-> InnerClass6, AnonymousClass4 참고.
//	
//	
//	
//	익명 클래스(Anonymous Class) : 이름이 없는 클래스
//	- 클래스의 선언과 객체 생성을 동시에 한다.
//		-> 단 한 번만 사용할 수 있다.
//	- 오직 하나의 객체만을 생성할 수 있는 일회용 클래스이다.
//	- 재사용하지 않고 특정 위치에서 한 번만 사용할 용도라면 이러한 "익명 자식 클래스"를 생성하고 사용할 수 있음.
//		-> AnonymousClass3 참고.
//	- 이름이 없으므로 생성자를 만들 수도 없다.
//	- 익명 클래스를 만들 때는 클래스를 만들 때처럼 바디를 사용하고, 문장을 마칠 때처럼 세미콜론으로 마친다.
}
